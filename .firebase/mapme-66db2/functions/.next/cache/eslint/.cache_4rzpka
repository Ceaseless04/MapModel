[{"C:\\Users\\17866\\Documents\\Javascript Projects\\nextjs\\mapfriends\\pages\\api\\hello.ts":"1","C:\\Users\\17866\\Documents\\Javascript Projects\\nextjs\\mapfriends\\pages\\auth.tsx":"2","C:\\Users\\17866\\Documents\\Javascript Projects\\nextjs\\mapfriends\\pages\\index.tsx":"3","C:\\Users\\17866\\Documents\\Javascript Projects\\nextjs\\mapfriends\\pages\\verify.tsx":"4","C:\\Users\\17866\\Documents\\Javascript Projects\\nextjs\\mapfriends\\pages\\_app.tsx":"5","C:\\Users\\17866\\Documents\\Javascript Projects\\nextjs\\mapfriends\\components\\error.tsx":"6","C:\\Users\\17866\\Documents\\Javascript Projects\\nextjs\\mapfriends\\components\\howto.tsx":"7","C:\\Users\\17866\\Documents\\Javascript Projects\\nextjs\\mapfriends\\components\\information.tsx":"8","C:\\Users\\17866\\Documents\\Javascript Projects\\nextjs\\mapfriends\\components\\map.tsx":"9","C:\\Users\\17866\\Documents\\Javascript Projects\\nextjs\\mapfriends\\components\\marker.tsx":"10","C:\\Users\\17866\\Documents\\Javascript Projects\\nextjs\\mapfriends\\components\\miniProfile.tsx":"11","C:\\Users\\17866\\Documents\\Javascript Projects\\nextjs\\mapfriends\\components\\popup.tsx":"12","C:\\Users\\17866\\Documents\\Javascript Projects\\nextjs\\mapfriends\\components\\sideNav.tsx":"13"},{"size":320,"mtime":1668149652473,"results":"14","hashOfConfig":"15"},{"size":13102,"mtime":1668456766462,"results":"16","hashOfConfig":"15"},{"size":3847,"mtime":1668456187626,"results":"17","hashOfConfig":"15"},{"size":2186,"mtime":1668456221760,"results":"18","hashOfConfig":"15"},{"size":197,"mtime":1668149652473,"results":"19","hashOfConfig":"15"},{"size":769,"mtime":1668178990415,"results":"20","hashOfConfig":"15"},{"size":710,"mtime":1668385729786,"results":"21","hashOfConfig":"15"},{"size":1895,"mtime":1668456221752,"results":"22","hashOfConfig":"15"},{"size":2957,"mtime":1668468647995,"results":"23","hashOfConfig":"15"},{"size":1036,"mtime":1668456766450,"results":"24","hashOfConfig":"15"},{"size":4361,"mtime":1668458574369,"results":"25","hashOfConfig":"15"},{"size":6231,"mtime":1668385729792,"results":"26","hashOfConfig":"15"},{"size":2217,"mtime":1668456221753,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1tg0lsv",{"filePath":"31","messages":"32","suppressedMessages":"33","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34"},{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","suppressedMessages":"40","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41"},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","suppressedMessages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","suppressedMessages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","suppressedMessages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57"},{"filePath":"58","messages":"59","suppressedMessages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","suppressedMessages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","suppressedMessages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67"},{"filePath":"68","messages":"69","suppressedMessages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71"},"C:\\Users\\17866\\Documents\\Javascript Projects\\nextjs\\mapfriends\\pages\\api\\hello.ts",[],[],"C:\\Users\\17866\\Documents\\Javascript Projects\\nextjs\\mapfriends\\pages\\auth.tsx",["72","73","74","75"],[],"// this is the authentication page\r\nimport { getAuth, sendSignInLinkToEmail } from \"firebase/auth\";\r\nimport React, { useEffect, useState } from \"react\";\r\nimport global from \"../styles/Global.module.scss\";\r\nimport styles from \"../styles/Auth.module.scss\";\r\nimport { auth, db } from \"../.env/firebase\";\r\nimport * as firebase from \"firebase/compat/app\";\r\nimport data from \"../public/Major_Names.json\";\r\nimport Error from \"../components/error\";\r\nimport { getDownloadURL, getStorage, ref, uploadBytes, uploadBytesResumable, uploadString } from \"firebase/storage\";\r\nimport { app, firestore } from '../firebase';\r\nimport { collection, addDoc, getDoc, getDocs, query, where } from 'firebase/firestore';\r\nimport GooglePlacesAutocomplete, { getLatLng } from 'react-google-places-autocomplete';\r\nimport  useRouter   from \"next/router\" ;\r\nimport { Value } from \"sass\";\r\nimport {key }  from  \"../.env/firebase\"\r\nconst dbInstance = collection(firestore, 'users');\r\nconst dbEmailInstance = collection(firestore, 'emails');\r\n\r\n\r\nconst Authentication = () => {\r\n  let [err, setError] = React.useState({ active: false, code: 0 , error: true});\r\n  let [pageNo, change] = React.useState(1);\r\n  let [imageUrl, changeUrl] = React.useState(\"\");\r\n  let [location, selectLocation] = React.useState(null as any)\r\n  let [userInformation, addInfo] = React.useState({\r\n    email: \"\",\r\n    name: \"\",\r\n    major: \"\",\r\n    country: \"\",\r\n    city: \"\",\r\n    picture: \"\",\r\n    lat: null,\r\n    lng: null\r\n  });\r\n  const router = useRouter\r\n  async function checkEmail(email: string,n:number) {\r\n    // if email tests pass submit it to firebase\r\n    // return submitEmail(email,n);\r\n\r\n    const emailPattern = /^[^ ]+@[^ ]+\\.[a-z]{2,3}$/;\r\n    if (email.match(emailPattern)) {\r\n      return signInUser(email,n);\r\n    }\r\n    else {\r\n      await error(5);\r\n    }\r\n  }\r\n  async function error(code: number, isError: boolean=true) {\r\n    setError({ active: !err.active, code: code , error:isError});\r\n    if (!err.active) {\r\n      await new Promise((f) => setTimeout(f, 3000));\r\n      // restore defaults\r\n      setError({ active: err.active, code: code, error:isError });\r\n    }\r\n  }\r\n   async function uploadFile(): Promise<string>{\r\n    const uploadRef = ref(storage, \"storage/\"+image?.name);\r\n    \r\n    const uploadTask =  await uploadBytesResumable(uploadRef, image as any)\r\n    const imageUrl = await getDownloadURL(uploadTask.ref).then((downloadURL: any) => {\r\n        \r\n          changeUrl(downloadURL)\r\n          userInformation.picture = downloadURL;\r\n          return downloadURL;\r\n        }).catch(async (er)=>{\r\n          await error(2)\r\n        });\r\n  return imageUrl!\r\n  }\r\n  function submitEmail(email: string,n:number): boolean {\r\n    // const auth = getAuth(app);\r\n    // change(n)\r\n    auth\r\n      .sendSignInLinkToEmail(email, actionCodeSettings)\r\n      .then(() => {\r\n        // The link was successfully sent. Inform the user.\r\n        // Save the email locally so you don't need to ask the user for it again\r\n        // if they open the link on the same device.\r\n        userInformation.email = email;\r\n        window.localStorage.setItem(\"email\", email);\r\n        error(6,false)\r\n        return true;\r\n      })\r\n      .catch(async (error) => {\r\n        const errorCode = error.code;\r\n        const errorMessage = error.message;\r\n        // or whichever error will appear here\r\n         await error(1);\r\n      });\r\n    return false;\r\n  }\r\n \r\n  function getInputVal(name: string) {\r\n    return (document.getElementById(name) as HTMLInputElement).value;\r\n  }\r\n  async function signInUser(email: string, n: any){\r\n    // check is user is in firebase \r\n    const q = query(dbEmailInstance, where(\"email\", \"==\", email));\r\n\r\n    const querySnapshot = await getDocs(q);\r\n    if(querySnapshot.size<1){\r\n        // the user doesn't exist in the database. Send an email\r\n        await submitEmail(email,n)\r\n    }\r\n    else{\r\n      change(n)\r\n       querySnapshot.forEach((doc: any) => {\r\n      // doc.data() is never undefined for query doc snaps\r\n    });\r\n    }\r\n   \r\n  }\r\n  useEffect(() => {\r\n    let email = window.location.href.split('/')[3]\r\n    if(email.split(\"?\").length>1){\r\n      let emailAddress = email.split(\"?\")[1].split(\"=\")[1].split(\"&\")[0].replace(\"%40\",\"@\")\r\n      // set to local storage and input value\r\n      window.localStorage.setItem(\"email\", emailAddress);\r\n      (document.getElementById(\"email\") as HTMLInputElement).value = emailAddress\r\n      checkEmail(emailAddress,2)\r\n\r\n    }\r\n},[]);\r\n  const getLatLng = async (placeId: string) => {\r\n    try {\r\n      const res = await fetch(`https://maps.googleapis.com/maps/api/geocode/json?place_id=${placeId}&key=${key}`);\r\n      const obj = await res.json();\r\n      // var obj = JSON.parse(data);\r\n      let lat =  obj.results[0].geometry.location.lat;\r\n      let lng =  obj.results[0].geometry.location.lng; \r\n      userInformation.lat = lat;\r\n      userInformation.lng = lng;\r\n      await uploadFile();\r\n      await addInfo({\r\n        email:  window.localStorage.getItem(\"email\") || getInputVal(\"email\"),\r\n        name: getInputVal(\"name\"),\r\n        major: getInputVal(\"major\"),\r\n        city: location?.label.split(',').slice(0,-1),\r\n        country: obj.results[0].formatted_address.split(',').slice(-1).join().trim(),\r\n        picture: imageUrl,\r\n        lat: obj.results[0].geometry.location.lat,\r\n        lng: obj.results[0].geometry.location.lng\r\n      });\r\n      addDoc(dbInstance, userInformation).then(async()=>{\r\n          await error(3, false)\r\n          router.replace('/')\r\n      })\r\n      return ({lat: lat, lng: lng})\r\n    } catch (err) {\r\n      console.log(err);\r\n    }\r\n  };\r\n  \r\n  //constant for allowing the image to be null when no image selected \r\n  const [Image] = useState(null);\r\n  //constant for image from user\r\n  const [image, setImage] = useState<File>();\r\n  //constant for image preview (string since we are using image URL)\r\n  const [preview, setPreview] = useState<string>()\r\n  //show preview of image\r\n  useEffect(()=>{\r\n    if(image){\r\n      //data reader\r\n      const reader = new FileReader(); \r\n      //activate when selection is done\r\n      reader.onloadend = ()=>{\r\n        setPreview(reader.result as string)\r\n      }\r\n      //read as data url\r\n      reader.readAsDataURL(image);\r\n    }else{\r\n      error;\r\n    }\r\n  },[image])\r\n\r\n\r\n    {/*Needed to work with firebase storage (sending images)*/}\r\n    const storage = getStorage();\r\n    const storageRef = ref(storage, \"storage\");\r\n    const imagesRef = storageRef;\r\n    const message1 = \"input-storage\";\r\n   // uploadString(storageRef, message1).then((snapshot) => {\r\n        //   console.log(snapshot)\r\n        //   console.log(\"Successful upload!\");\r\n        // });\r\n    \r\n   async function next(e: any, n: number) {\r\n    e.preventDefault();\r\n    switch (n) {\r\n      case 2:\r\n        const email = getInputVal(\"email\");\r\n        window.localStorage.setItem(\"email\", email)\r\n        //check email then proceed to call below function\r\n        checkEmail(email,n) ;\r\n        break;\r\n      case 3:\r\n      // add if user information is null - use kris function coral\r\n        userInformation.name = getInputVal(\"name\");\r\n        userInformation.major = getInputVal(\"major\");\r\n        userInformation.city = location?.label.split(',').slice(0,-1);\r\n        userInformation.country = location?.label.split(',').slice(-1).join().trim();\r\n        userInformation.email = getInputVal(\"email\");\r\n\r\n        //If statements to call for errors if null -> Kris (note by cami)\r\n        if(userInformation.name==\"\" || userInformation.major==\"\" || userInformation.city==\"\" || userInformation.country==\"\" || userInformation.email==\"\"){\r\n            \r\n            if(userInformation.city==\"\"){\r\n              await error(12)\r\n            }\r\n            else if(userInformation.name==\"\") {\r\n              await error(9)\r\n            }\r\n            else if(userInformation.major==\"\") {\r\n              await error(10)\r\n            }\r\n            else if(userInformation.country==\"\") {\r\n              await error(11)\r\n            }\r\n            else if(userInformation.email==\"\") {\r\n              await error(5)\r\n            }\r\n            else{\r\n              await error(4);\r\n            }\r\n        }\r\n        else{\r\n           change(n);\r\n        }\r\n       \r\n        break;\r\n      case 0:\r\n        if(image){\r\n          await getLatLng(location.value.place_id)\r\n        \r\n          window.localStorage.clear()\r\n        }\r\n        else{\r\n          //changed error 8 to error 11 (Cami)\r\n          await error(11)\r\n        }\r\n       \r\n        break;\r\n      default:\r\n        change(n);\r\n        break;\r\n    }\r\n  }\r\n  function back(e: any, n: number) {\r\n    e.preventDefault();\r\n    change(n);\r\n  }\r\n \r\n  return (\r\n    <div className={global.font}>\r\n      <form className={styles.center_flex}>\r\n        {/* step one: email input */}\r\n        <div className={pageNo == 1 ? styles.form : global.hidden}>\r\n          <h1 className={styles.prompt_email }>Type your student email</h1>\r\n\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Email\"\r\n            name=\"email\"\r\n            id=\"email\">\r\n          </input>\r\n          <div className={styles.bottomBtns} >\r\n            <button className={`${global.button_primary} ${global.button}`} onClick={(e) => next(e, 2)}> Next </button>\r\n          </div>\r\n        </div>\r\n        {/* step two: image input */}\r\n        <div className={pageNo == 2 ? styles.form : global.hidden}>\r\n          <h1>Add information</h1>\r\n\r\n          <p className={styles.prompts_Info}>Name</p>\r\n          <input className={styles.nameInput} type=\"text\" placeholder=\"Name\" name=\"name\" id=\"name\"></input>\r\n\r\n          <p className={styles.prompts_Info}>Major</p>\r\n\r\n          <select className={styles.selectMajor} name=\"major\" id=\"major\" >\r\n            {data[\"MAIN\"].map((val)=><option value={val['Major Name']==\"Select your Major\"?\"\":val['Major Name']} key={val['Major Name']}>{val[\"Major Name\"]}</option>)}\r\n        </select>\r\n\r\n        <p className={styles.prompts_Info} >Type your city of origin below</p>\r\n\r\n        <div className={styles.input}>\r\n            <GooglePlacesAutocomplete\r\n                apiKey={key}\r\n                selectProps={{\r\n                  location,\r\n                  onChange: selectLocation,\r\n                  styles: {\r\n                    input: (provided: any) => ({\r\n                      ...provided,\r\n                      height: '60px',\r\n                      width: '39vw',\r\n                      color: '#486966',\r\n                    }),\r\n                    option: (provided: any) => ({\r\n                      ...provided,\r\n                      color: '#486966',\r\n                      height: '60px',\r\n                      width: '39vw',\r\n                    }),\r\n                    singleValue: (provided:any) => ({\r\n                      ...provided,\r\n                      color: '#486966',\r\n                      width: '39vw',    \r\n                    }),\r\n                  },\r\n                }}\r\n              />\r\n        </div>\r\n          <p className={styles.error_display}>Country Of Origin: <strong>{location?.label.split(',').slice(-1)}</strong></p>\r\n          <p>City of Origin: <strong>{location?.label.split(',').slice(0,-1)}</strong></p>\r\n          <div  className={styles.bottomBtns}>\r\n            <button className={`${global.button_secondary} ${global.button}`}  onClick={(e) => back(e, 1)}> back </button>\r\n           \r\n            <button className={`${global.button_primary} ${global.button}`}  onClick={(e) => next(e, 3)}> Next </button>\r\n          </div>\r\n        </div>\r\n        {/* step two: image input */}\r\n        <div className={pageNo === 3 ? styles.form : global.hidden}>\r\n          <h1>Upload your photo</h1>\r\n          {/* display string base64 for url as an image and fit image with good resolution */}\r\n           <img src={preview} style={{objectFit:\"contain\"}} width='20%' height='50%' />\r\n              {/* get url of image when it is selected and/or changed */}\r\n              <input type={\"file\"} accept=\"image/*\" onChange={async (event)=>{ const file = event.target.files![0]\r\n              if (File){\r\n                setImage(file);\r\n              }else{\r\n                await error(1);\r\n              }\r\n              }}/> \r\n\r\n          {/* submit everything to firebase on this step */}\r\n          <div  className={styles.bottomBtns}>\r\n            <button className={`${global.button_secondary} ${global.button}`}  onClick={(e) => back(e, 2)}> back </button>\r\n            <button className={`${global.button_primary} ${global.button}`}  onClick={(e) => next(e, 0)}> Next </button>\r\n          </div>\r\n        </div>\r\n      </form>\r\n      <Error code={err.code} boolean={err.active} isError={err.error}></Error>\r\n\r\n    </div>\r\n  );\r\n};\r\nconst actionCodeSettings = {\r\n  // URL you want to redirect back to. The domain (www.example.com) for this\r\n  // URL must be in the authorized domains list in the Firebase Console.\r\n  url: \"https://mapme-66db2.web.app/verify/\",\r\n  // This must be true.\r\n  handleCodeInApp: true\r\n};\r\n\r\n\r\nexport default Authentication;\r\n","C:\\Users\\17866\\Documents\\Javascript Projects\\nextjs\\mapfriends\\pages\\index.tsx",[],[],"C:\\Users\\17866\\Documents\\Javascript Projects\\nextjs\\mapfriends\\pages\\verify.tsx",["76"],[],"import type { NextPage } from 'next'\r\nimport Link from 'next/link';\r\nimport { collection, addDoc } from 'firebase/firestore';\r\nimport { firestore } from '../firebase';\r\nimport { auth } from \"../.env/firebase\";\r\nimport styles  from \"../styles/Verify.module.scss\"\r\nimport { useRouter } from 'next/router';\r\nimport React, { useEffect, useState } from 'react';\r\n\r\nconst dbInstance = collection(firestore, 'emails');\r\n\r\nconst Verify: NextPage = () => {\r\n    let [email, change] = useState(null as any);\r\n\r\n    useEffect(()=>{\r\n        if (typeof window !== \"undefined\") {\r\n            if (auth.isSignInWithEmailLink(window.location.href)) {\r\n                change(window.localStorage.getItem(\"email\"));\r\n                if (!email) {\r\n                email = window.localStorage.getItem(\"email\");\r\n                }\r\n                auth\r\n                .signInWithEmailLink(email || \"\", window.location.href)\r\n                .then((result) => {\r\n                    // Clear email from storage.\r\n                    window.localStorage.removeItem(\"email\");\r\n                    window.localStorage.setItem(\"email\",email||\"\")\r\n                    addDoc(dbInstance, {email: email}).then(()=>{\r\n                        console.log(\"added\")\r\n                    })\r\n                    router.replace('/auth?email='+email.replace(\"@\",\"%40\"))\r\n                })\r\n                .catch((error) => {\r\n                    // Some error occurred, you can inspect the code: error.code\r\n                    // Common errors could be invalid email and invalid or expired OTPs.\r\n                    console.log(error)\r\n                });\r\n            }}\r\n    },[])\r\n    \r\n    const router = useRouter()\r\n\r\n    return(\r\n        <div className={styles.parent}>\r\n            <div>\r\n                redirecting...\r\n                if page does not redirect click here \r\n                <br></br>\r\n               {/* <Link href=\"/auth/\"> */}\r\n                <button onClick={() => router.replace('/auth?email='+email.replace(\"@\",\"%40\"))}>\r\n                    redirect me\r\n                </button> \r\n              {/* </Link> */}\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\nexport default Verify","C:\\Users\\17866\\Documents\\Javascript Projects\\nextjs\\mapfriends\\pages\\_app.tsx",[],[],"C:\\Users\\17866\\Documents\\Javascript Projects\\nextjs\\mapfriends\\components\\error.tsx",[],[],"C:\\Users\\17866\\Documents\\Javascript Projects\\nextjs\\mapfriends\\components\\howto.tsx",[],[],"C:\\Users\\17866\\Documents\\Javascript Projects\\nextjs\\mapfriends\\components\\information.tsx",[],[],"C:\\Users\\17866\\Documents\\Javascript Projects\\nextjs\\mapfriends\\components\\map.tsx",["77"],[],"import React, { useState } from \"react\";\r\nimport GoogleMapReact from \"google-map-react\";\r\n// import {MarkerF} from '@react-google-maps/api'\r\nimport { styleMap } from \"../modules/mapStyle\";\r\nimport CustomMarker from \"./marker\";\r\nimport sty  from \"../styles/Marker.module.scss\"\r\nimport { key } from '../.env/firebase'\r\nimport { GoogleMap, useJsApiLoader, Marker, MarkerClusterer, OverlayView } from \"@react-google-maps/api\";\r\ntype Props = {\r\n    markerData: any\r\n    sendMarker:any\r\n  }\r\n// const MapMarker = ({ text }) => <div>{text}</div>;\r\nconst MapComponent=({ markerData, sendMarker}:Props )=>{\r\n  const containerStyle = { height: \"100vh\", width: \"100%\" }\r\n  const { isLoaded } = useJsApiLoader({\r\n    id: 'google-map-script',\r\n    googleMapsApiKey: key\r\n  })\r\n\r\n  const [map, setMap] = React.useState(null as any)\r\n\r\n  const onLoad = React.useCallback(function callback(map: any) {\r\n    // This is just an example of getting and using the map instance!!! don't just blindly copy!\r\n    const bounds = new window.google.maps.LatLngBounds(defaultProps.center);\r\n    markerData.forEach((position: any) => bounds.extend({lat: position.lat, lng: position.lng}));\r\n    map.fitBounds(bounds);\r\n    // map.setZoom(defaultProps.zoom)\r\n    map.setZoom(map.getZoom() + 2);\r\n\r\n    setMap(map)\r\n  }, [])\r\n\r\n  const onUnmount = React.useCallback(function callback(map: any) {\r\n    setMap(null)\r\n  }, [])\r\n\r\n  const defaultProps = {\r\n    center: {\r\n      lat: 37.0902,\r\n      lng: -95.7129,\r\n    },\r\n    zoom: 5,\r\n  };\r\n  const location= (lat: any,long: any) => {\r\n    return {lat: lat,\r\n    lng: long}\r\n  }\r\n  \r\nconst marker = (userData: any) => {\r\n    // 👇️ take parameter passed from Child component\r\n    sendMarker(userData);\r\n  };\r\n  return (\r\n    <div style={containerStyle}>\r\n      { isLoaded && <GoogleMap\r\n        mapContainerStyle={containerStyle}\r\n        center={defaultProps.center}\r\n        zoom={defaultProps.zoom}\r\n        onLoad={onLoad}\r\n        onUnmount={onUnmount}\r\n      >\r\n         {\r\n           <MarkerClusterer options={markerData}>\r\n           {(clusterer) =>\r\n           markerData.map((el:any, idx:any) => \r\n          //  <Marker \r\n       \r\n          //   // icon={el.picture}\r\n          //   shape={google.maps.MarkerShape.}\r\n          //   key={idx}\r\n          //   clusterer={clusterer}\r\n          //           position={location(el.lat,el.lng)}\r\n          //           onClick={() => marker(el)}\r\n          //   />\r\n          <OverlayView\r\n          key={idx}\r\n          position={location(el.lat,el.lng)}\r\n            mapPaneName={OverlayView.OVERLAY_MOUSE_TARGET}\r\n          >\r\n              {\r\n                <CustomMarker userObject={el} selectMarker={marker}/>\r\n                  \r\n              } \r\n            \r\n            </OverlayView>\r\n                  )\r\n           \r\n           \r\n           }\r\n           </MarkerClusterer>\r\n        }\r\n      </GoogleMap>}\r\n    </div>\r\n  );\r\n       \r\n}\r\n\r\nexport default MapComponent;","C:\\Users\\17866\\Documents\\Javascript Projects\\nextjs\\mapfriends\\components\\marker.tsx",[],[],"C:\\Users\\17866\\Documents\\Javascript Projects\\nextjs\\mapfriends\\components\\miniProfile.tsx",[],[],"C:\\Users\\17866\\Documents\\Javascript Projects\\nextjs\\mapfriends\\components\\popup.tsx",["78"],[],"import { useEffect, useState } from \"react\";\r\nimport styles from \"../styles/Popup.module.scss\";\r\nimport InformationComponent from \"./information\";\r\nimport { popups } from \"../modules/popups\";\r\nimport GooglePlacesAutocomplete from \"react-google-places-autocomplete\";\r\nimport data from \"../public/Major_Names.json\";\r\nimport { key } from \"../.env/firebase\";\r\nimport { countries } from \"../modules/countries\"\r\nvar emojiFlags = require('emoji-flags');\r\n\r\ntype props = {\r\n  dataType: string;\r\n  handleClick: any;\r\n};\r\nconst Popup = ({ dataType, handleClick}: props,) => {\r\n  const [showPop, display] = useState(false);\r\n  const [location, selectLocation] = useState('');\r\n  const [showFilter, displayFilter] = useState(false);\r\n  const [major, changeMajor] = useState(\"\")\r\n\r\n  useEffect(()=>{\r\n    if(dataType == popups.filter){\r\n      handleClick([location,major])\r\n    }\r\n  },[location,major])\r\n\r\n  function getFlagEmoji(countryCode: string) {\r\n    const codePoints = countryCode\r\n      .toUpperCase()\r\n      .split('')\r\n      .map((char:any) =>  127397 + char.charCodeAt());\r\n    return String.fromCodePoint(...codePoints);\r\n  }\r\n  return (\r\n    <div className={`${styles.index} ${dataType == popups.filter?styles.index_topRight:``} `  }>\r\n      {dataType == popups.filter && (\r\n        <div>\r\n          <button\r\n            className={`${styles.filter_button} ${showFilter?styles.filter_button_long:``}`}\r\n            onClick={() => {\r\n              displayFilter(!showFilter);\r\n            }}\r\n          >\r\n            <span className=\"material-icons\">\r\n              {!showFilter ? \"expand_more\" : \"expand_less\"}\r\n            </span>\r\n            <p>filter:</p>\r\n          </button>\r\n          <div\r\n            className={\r\n              showFilter\r\n                ? `${styles.filter_container} ${styles.openheight}`\r\n                : `${styles.filter_container} ${styles.closeheight}`\r\n            }\r\n          >\r\n            {/* <p>country</p> */}\r\n            {/* <GooglePlacesAutocomplete\r\n              apiKey= { key }\r\n              selectProps={{\r\n                location,\r\n                onChange: selectLocation,\r\n                styles: {\r\n                  input: (provided: any) => ({\r\n                    ...provided,\r\n                    height: \"60px\",\r\n                    width: \"39vw\",\r\n                    color: \"#486966\"\r\n                  }),\r\n                  option: (provided: any) => ({\r\n                    ...provided,\r\n                    color: \"#486966\",\r\n                    height: \"60px\",\r\n                    width: \"39vw\"\r\n                  }),\r\n                  singleValue: (provided: any) => ({\r\n                    ...provided,\r\n                    color: \"#486966\",\r\n                    width: \"39vw\"\r\n                  })\r\n                }\r\n              }}\r\n            /> */}\r\n            <p>Countries</p>\r\n            <select className={styles.select} value={location} name=\"country\" id=\"country\"   onChange={(e)=>{\r\n                    selectLocation(e.target.value as any);\r\n                  }\r\n                }>\r\n              {\r\n                countries.map((val:any, index: any)=>{\r\n                  return <option key={index} \r\n                value={val.name}\r\n                  >{index>0?getFlagEmoji(val.code):null} {val.name}                 \r\n                  </option>\r\n                })\r\n              }\r\n            </select>\r\n            <p>Major</p>\r\n            <select className={styles.select} value={major} name=\"major\" id=\"major\" onChange={(e)=>{\r\n                    changeMajor(e.target.value as any);\r\n                  }}>\r\n              {data[\"MAIN\"].map((val) => (\r\n                <option value={val['Major Name']==\"Select your Major\"?\"\":val['Major Name']} key={val[\"Major Name\"]} onClick={()=>changeMajor(val[\"Major Name\"])}>\r\n                  {val[\"Major Name\"]}\r\n                </option>\r\n              ))}\r\n            </select>\r\n            <button  className={`${styles.clear}`} onClick={()=>{\r\n              \r\n          changeMajor('')\r\n          selectLocation('')  \r\n          }\r\n            }>\r\n              Clear\r\n            </button>\r\n          </div>\r\n        </div>\r\n      )}\r\n      {dataType == popups.information && (\r\n        <div\r\n          className={\r\n            showPop && dataType == popups.information\r\n              ? `${styles.parent} ${styles.moveleft}`\r\n              : `${styles.parent} ${styles.moveright}`\r\n          }\r\n        >\r\n          <div className={styles.child}>\r\n            <span\r\n              className=\"material-icons\"\r\n              onClick={() => {\r\n                display(!showPop);\r\n              }}\r\n            >\r\n              close\r\n            </span>\r\n\r\n            <div className={styles.inherit}>\r\n              <InformationComponent\r\n                page={popups.information}\r\n              ></InformationComponent>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n      {dataType == popups.team && (\r\n        <div\r\n          className={\r\n            showPop && dataType == popups.team\r\n              ? `${styles.parent} ${styles.moveleft}`\r\n              : `${styles.parent} ${styles.moveright}`\r\n          }\r\n        >\r\n          <div className={styles.child}>\r\n            <span\r\n              className=\"material-icons\"\r\n              onClick={() => {\r\n                display(!showPop);\r\n              }}\r\n            >\r\n              close\r\n            </span>\r\n\r\n            <div className={styles.inherit}>\r\n              <InformationComponent page={popups.team}></InformationComponent>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n      {dataType == popups.information && !showPop && (\r\n        <div onClick={() => display(true)} className={styles.index_bottomRight}>\r\n          <button>\r\n          <span className=\"material-icons\">info\r\n</span>\r\n          </button>\r\n        </div>\r\n      )}\r\n      {dataType == popups.team && !showPop && (\r\n        <div onClick={() => display(true)} className={` ${styles.index_bottomRight} ${styles.index_bottomRight_more}`}>\r\n          <button>\r\n          <span className=\"material-icons\">groups\r\n</span>\r\n          </button>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\nexport default Popup;\r\n","C:\\Users\\17866\\Documents\\Javascript Projects\\nextjs\\mapfriends\\components\\sideNav.tsx",["79","80"],[],"import React from 'react';\r\nimport  styles  from '../styles/Side.module.scss'\r\nimport globals from '../styles/Global.module.scss'\r\nimport home from '../styles/Home.module.scss'\r\nimport { user } from '../models/userInformation';\r\nimport { SERVER_PROPS_ID } from 'next/dist/shared/lib/constants';\r\n// import 'material-icons/iconfont/material-icons.css';\r\n\r\ntype props = {\r\n    userData: any\r\n}\r\n\r\nconst SideNav=({userData}:props)=>{\r\n    let [state,open]=React.useState(!(Object.getPrototypeOf(userData) === Object.prototype))\r\n    let hasData = Boolean(Object.keys(userData).length)\r\n    function menu(){\r\n        // returned to original state => Kris\r\n        open(state=!state)\r\n    }\r\n\r\n    return(\r\n        <div className={`${styles.container} ${state?styles.open:styles.close}` }>\r\n            {/* <image></image> */}\r\n            <div className={styles.closeOpenBtn}>\r\n                <button className={styles.button} onClick={()=>{menu()}}><span className=\"material-icons\">{!state?\"arrow_forward_ios\":\"close\"}\r\n                    </span></button>             \r\n            </div>\r\n            {\r\n                hasData &&<div className={`${state?styles.image_container:globals.hidden}`  }>\r\n                 \r\n                <img className={styles.profilePic} src={userData.picture} object-fit='cover' />\r\n             </div>\r\n            }\r\n            {\r\n                hasData && <div className={`${state?styles.container_bottom:globals.hidden}`}>\r\n                <h1 className={styles.name}> {userData.name} </h1>\r\n                <h2 className={styles.locationf}> Location </h2>\r\n                <h2 className={styles.location}>{userData.city}, {userData.country}</h2>\r\n                <h1 className={styles.majorf}> Major </h1>\r\n                <h2 className={styles.major} >{userData.major}</h2>\r\n           </div>\r\n            }\r\n            {\r\n                !hasData && <div className={`${state?`${styles.container_bottom} ${styles.container_bottom_no_data}`:globals.hidden} `}>\r\n                    Select a marker to see the data here or add your information below\r\n                    \r\n                </div>\r\n            }\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SideNav;",{"ruleId":"81","severity":1,"message":"82","line":124,"column":3,"nodeType":"83","endLine":124,"endColumn":5,"suggestions":"84"},{"ruleId":"81","severity":1,"message":"85","line":175,"column":5,"nodeType":"83","endLine":175,"endColumn":12,"suggestions":"86"},{"ruleId":"87","severity":1,"message":"88","line":326,"column":12,"nodeType":"89","endLine":326,"endColumn":88},{"ruleId":"90","severity":1,"message":"91","line":326,"column":12,"nodeType":"89","endLine":326,"endColumn":88},{"ruleId":"81","severity":1,"message":"92","line":20,"column":25,"nodeType":"93","endLine":20,"endColumn":61},{"ruleId":"81","severity":1,"message":"94","line":32,"column":6,"nodeType":"83","endLine":32,"endColumn":8,"suggestions":"95"},{"ruleId":"81","severity":1,"message":"96","line":25,"column":5,"nodeType":"83","endLine":25,"endColumn":21,"suggestions":"97"},{"ruleId":"87","severity":1,"message":"88","line":31,"column":17,"nodeType":"89","endLine":31,"endColumn":96},{"ruleId":"90","severity":1,"message":"91","line":31,"column":17,"nodeType":"89","endLine":31,"endColumn":96},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'checkEmail'. Either include it or remove the dependency array.","ArrayExpression",["98"],"React Hook useEffect has a missing dependency: 'error'. Either include it or remove the dependency array.",["99"],"@next/next/no-img-element","Do not use `<img>` element. Use `<Image />` from `next/image` instead. See: https://nextjs.org/docs/messages/no-img-element","JSXOpeningElement","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","Assignments to the 'email' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","CallExpression","React Hook React.useCallback has missing dependencies: 'defaultProps.center' and 'markerData'. Either include them or remove the dependency array.",["100"],"React Hook useEffect has missing dependencies: 'dataType' and 'handleClick'. Either include them or remove the dependency array. If 'handleClick' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["101"],{"desc":"102","fix":"103"},{"desc":"104","fix":"105"},{"desc":"106","fix":"107"},{"desc":"108","fix":"109"},"Update the dependencies array to be: [checkEmail]",{"range":"110","text":"111"},"Update the dependencies array to be: [error, image]",{"range":"112","text":"113"},"Update the dependencies array to be: [defaultProps.center, markerData]",{"range":"114","text":"115"},"Update the dependencies array to be: [dataType, handleClick, location, major]",{"range":"116","text":"117"},[4482,4484],"[checkEmail]",[6301,6308],"[error, image]",[1290,1292],"[defaultProps.center, markerData]",[872,888],"[dataType, handleClick, location, major]"]